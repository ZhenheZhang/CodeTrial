basic_binary_tree.ipynb
---------------------------
class Node:
    """
    A Node has data variable and pointers to Nodes to its left and right
    """

    def __init__(self, data: int) -> None:
        self.data = data
        self.left: Node | None = None   # iterative property
        self.right: Node | None = None  # iterative property


def display(tree: Node) -> None:
    if tree:
        display(tree.left)
        print(tree.data)
        display(tree.right)


def depth_of_tree(tree: Node) -> int:
    depth = 0
    if tree:
        depth = 1 + max(depth_of_tree(tree.left), depth_of_tree(tree.right))
    return depth 


def is_full_binary_tree(tree: Node) -> bool:
    if not tree:
        return True
    if tree.left and tree.right:
        return is_full_binary_tree(tree.left) and is_full_binary_tree(tree.right)
    else:
        return not tree.left and not tree.right


def main():
    tree = Node(1)
    tree.left = Node(2)
    tree.right = Node(3)
    tree.left.left = Node(4)
    tree.left.right = Node(5)
    tree.left.right.left = Node(6)
    tree.right.left = Node(7)
    tree.right.left.left = Node(8)
    tree.right.left.left.right = Node(9)

    print(is_full_binary_tree(tree))
    print(depth_of_tree(tree))
    print("Tree is: ")
    display(tree)


if __name__ == "__main__":
    main()
